// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4048;

import org.usfirst.frc4048.commands.*;
import org.usfirst.frc4048.commands.intake.FlushCube;
import org.usfirst.frc4048.commands.intake.ToggleIntake;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import javafx.scene.control.ToggleButton;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc4048.subsystems.*;
import org.usfirst.frc4048.subsystems.Arm.ArmPositions;

import com.sun.org.apache.xalan.internal.xsltc.trax.SmartTransformerFactoryImpl;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public JoystickButton toggleIntake;
    public JoystickButton intakeFlush;
    public JoystickButton ditchCube;
    public JoystickButton toggleMode;
    public Joystick rightJoystick;
    public JoystickButton releaseCube;
    public JoystickButton grabCube;
    public JoystickButton moveToSwitch;
    public JoystickButton moveToLowScale;
    public JoystickButton moveToHighScale;
    public JoystickButton moveToExchange;
    public JoystickButton moveToClimb;
    public JoystickButton cancelFunction;
    public Joystick controller;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public XboxController xboxController;
    public boolean rightTriggerPrevPressed = false;
    
    public JoystickButton reconfigEncoders;

    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        controller = new Joystick(2);
        
        cancelFunction = new JoystickButton(controller, 7);
        cancelFunction.whileHeld(new CancelCommand());
        moveToClimb = new JoystickButton(controller, 8);
        moveToClimb.whenPressed(new MoveArm(ArmPositions.Climb));
        moveToExchange = new JoystickButton(controller, 3);
        moveToExchange.whenPressed(new MoveArm(ArmPositions.Exchange));
        moveToHighScale = new JoystickButton(controller, 4);
        moveToHighScale.whenPressed(new MoveArm(ArmPositions.HighScale));
        moveToLowScale = new JoystickButton(controller, 2);
        moveToLowScale.whenPressed(new MoveArm(ArmPositions.LowScale));
        moveToSwitch = new JoystickButton(controller, 1);
        moveToSwitch.whenPressed(new MoveArm(ArmPositions.Switch));
        grabCube = new JoystickButton(controller, 6);
        grabCube.whenPressed(new GrabCube());
        releaseCube = new JoystickButton(controller, 5);
        releaseCube.whenPressed(new BlankCommand());
        rightJoystick = new Joystick(1);
        
        toggleMode = new JoystickButton(rightJoystick, 10);
        toggleMode.whenPressed(new ToggleMode());
        ditchCube = new JoystickButton(rightJoystick, 9);
        ditchCube.whenPressed(new BlankCommand());
        intakeFlush = new JoystickButton(rightJoystick, 8);
        intakeFlush.whileHeld(new FlushCube());
        toggleIntake = new JoystickButton(rightJoystick, 7);
        toggleIntake.whenPressed(new ToggleIntake());
        leftJoystick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        reconfigEncoders = new JoystickButton(leftJoystick, 11);
        reconfigEncoders.whenPressed(new ReconfigEncoders());
        
        xboxController = new XboxController(2);
        
        SmartDashboard.putData("Drive Forward", new DriveDistance(20, 0.2, 0.0, 0.0));
        SmartDashboard.putData("Rotate 90", new RotateAngle(90));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getController() {
        return controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public XboxController getXboxController()
    {
    	return xboxController;
    }
    
    public boolean cancelPressed()
    {
    	return cancelFunction.get();
    }
    
    public boolean getRightTriggerPressed()
    {
    	boolean output = !rightTriggerPrevPressed && xboxController.getTriggerAxis(Hand.kRight) >= 0.75;
    	rightTriggerPrevPressed = xboxController.getTriggerAxis(Hand.kRight) >= 0.75;
    	return output;
    }
}

