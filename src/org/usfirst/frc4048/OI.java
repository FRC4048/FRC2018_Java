// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4048;


import org.usfirst.frc4048.commands.ClosePincher;
import org.usfirst.frc4048.commands.OpenPincher;
import org.usfirst.frc4048.commands.arm.MoveArm;
import org.usfirst.frc4048.subsystems.Arm.Position;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick controller;
    public final XboxTriggerRight xboxTriggerRight;
    public final XboxTriggerLeft xboxTriggerLeft;
    
    public JoystickButton openPincher;
    public JoystickButton closePincher;
    
    public JoystickButton armToHighScale;
    public JoystickButton armToLowScale;
    public JoystickButton armToIntake;
    public JoystickButton armToClimb;
    public JoystickButton armToSwitch; 
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public XboxController xboxController;
    public boolean rightTriggerPrevPressed = false;
    
    public JoystickButton reconfigEncoders;
    public JoystickButton overrideButton;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        controller = new Joystick(2);
        rightJoystick = new Joystick(1);        
        leftJoystick = new Joystick(0);
        xboxController = new XboxController(2);

        xboxTriggerRight = new XboxTriggerRight(xboxController);
        xboxTriggerLeft = new XboxTriggerLeft(xboxController);
        
        armToSwitch = new JoystickButton(controller, 3);
        armToSwitch.whenPressed(new MoveArm(Position.SWITCH));
        
        armToLowScale = new JoystickButton(controller, 2);
        armToLowScale.whenPressed(new MoveArm(Position.LOWSCALE));
        
        armToHighScale = new JoystickButton(controller, 4);
        armToHighScale.whenPressed(new MoveArm(Position.HIGHSCALE));
        
        xboxTriggerRight.whenActive(new MoveArm(Position.INTAKE));
        
        
        openPincher = new JoystickButton(controller, 5);
        openPincher.whenPressed(new OpenPincher());
        closePincher = new JoystickButton(controller, 6);
        closePincher.whenPressed(new ClosePincher());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getController() {
        return controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
	public XboxController getXboxController() {
    	return xboxController;
    }
    
	public boolean getLeftstickUp() {
    	return xboxController.getY(Hand.kLeft) <= -0.75;
    }
    
	public boolean getLeftstickDown() {
    	return xboxController.getY(Hand.kLeft) >= 0.75;
    }
	
	public boolean getRightstickUp() {
		return xboxController.getY(Hand.kRight) <= -0.75;
	}
	
	public boolean getRightstickDown() {
		return xboxController.getY(Hand.kRight) >= 0.75;
	}
	
	public boolean getGetCubeOverride()
	{
		return overrideButton.get();
	}
	
	public boolean getUpDPAD()
	{
		if(xboxController.getPOV() <= 15 ||
			xboxController.getPOV() >= 345) {
			return true;
		} else {
			return false;
		}
	}
	
	public boolean getDownDPAD()
	{
		if(xboxController.getPOV() <= 195 &&
			xboxController.getPOV() >= 165) {
			return true;
		} else {
			return false;
		}
	}
	
	public void doRumble() {
		xboxController.setRumble(RumbleType.kLeftRumble, 1);
		xboxController.setRumble(RumbleType.kRightRumble, 1);
	}
	public void noRumble() {
		xboxController.setRumble(RumbleType.kLeftRumble, 0);
		xboxController.setRumble(RumbleType.kRightRumble, 0);
	}
}

