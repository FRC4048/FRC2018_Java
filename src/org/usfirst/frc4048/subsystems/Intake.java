// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4048.subsystems;

import org.usfirst.frc4048.Robot;
import org.usfirst.frc4048.RobotMap;
import org.usfirst.frc4048.subsystems.Arm.ArmPositions;
import org.usfirst.frc4048.utils.Logging;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftBackIntakeMotor = RobotMap.intakeGripMotor;
    private final SpeedController rightBackIntakeMotor = RobotMap.intakeDeployMotor;
    private final WPI_TalonSRX leftFrontIntakeMotor = RobotMap.clawgripMotor;
    private final WPI_TalonSRX rightFrontIntakeMotor = RobotMap.clawpitchMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final int TIMEOUT = 100;
    
	/**
	 * Approximately 8/12 volts.
	 */
    private final double ROLLER_SPEED = 0.67;//Intake speed
    private final double ROLLER_SPEED_FLUSH = /*0.67*/-0.27;//Flush sleep Switch Position or lower
    private final double ROLLER_SPEED_FLUSH_FASTER = -0.77;//Flush speed Scale position
    
    /**
     * Approximately 4/12 volts.
     */
    private final double VARIED_ROLLER_SPEED = 0.33*Robot.GLOBAL_SCALE_FACTOR;

    public Intake()
    {
    	leftFrontIntakeMotor.selectProfileSlot(0, 0);
    	leftFrontIntakeMotor.configPeakOutputForward(1, TIMEOUT);
    	leftFrontIntakeMotor.configPeakOutputReverse(-1, TIMEOUT);
    	leftFrontIntakeMotor.configNominalOutputForward(0, TIMEOUT);
    	leftFrontIntakeMotor.configNominalOutputReverse(0, TIMEOUT);
    	leftFrontIntakeMotor.setNeutralMode(NeutralMode.Brake);
    	
    	rightFrontIntakeMotor.selectProfileSlot(0, 0);
    	rightFrontIntakeMotor.configPeakOutputForward(1, TIMEOUT);
    	rightFrontIntakeMotor.configPeakOutputReverse(-1, TIMEOUT);
    	rightFrontIntakeMotor.configNominalOutputForward(0, TIMEOUT);
    	rightFrontIntakeMotor.configNominalOutputReverse(0, TIMEOUT);
    	rightFrontIntakeMotor.setNeutralMode(NeutralMode.Brake);
    	
    	rightBackIntakeMotor.setInverted(true);
    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
	public final Logging.LoggingContext loggingContext = new Logging.LoggingContext(Logging.Subsystems.INTAKE) {

		@Override
		protected void addAll() {
//			add("Deploy Motor Speed", deployMotor.get());
			add("Left Wheel Speed", leftBackIntakeMotor.get());
			add("Right Wheel Speed", rightBackIntakeMotor.get());
//			add("Grip Motor Speed", gripMotor.get());
//			add("Raised?", isRaised());
//			add("Lowered?", isLowered());
//			add("Has Cube?", hasCube());
//			add("Open?", openLimit.get());
//			add("Close?", closeLimit.get());

		}
		

	};

    @Override
    public void periodic() {
    	loggingContext.writeData();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void intakeCube()
    {
    	leftFrontIntakeMotor.set(ControlMode.PercentOutput, ROLLER_SPEED);
    	rightFrontIntakeMotor.set(ControlMode.PercentOutput, -ROLLER_SPEED);
    	leftBackIntakeMotor.set(ROLLER_SPEED);
    	rightBackIntakeMotor.set(ROLLER_SPEED);
    }
    
    public void adjustCubeLeftSide()
    {
    	leftFrontIntakeMotor.set(ControlMode.PercentOutput, ROLLER_SPEED);
    	rightFrontIntakeMotor.set(ControlMode.PercentOutput, -VARIED_ROLLER_SPEED);
    	leftBackIntakeMotor.set(ROLLER_SPEED);
    	rightBackIntakeMotor.set(VARIED_ROLLER_SPEED);
    }
    
    public void adjustCubeRightSide()
    {
    	leftFrontIntakeMotor.set(ControlMode.PercentOutput, VARIED_ROLLER_SPEED);
    	rightFrontIntakeMotor.set(ControlMode.PercentOutput, -ROLLER_SPEED);
    	leftBackIntakeMotor.set(VARIED_ROLLER_SPEED);
    	rightBackIntakeMotor.set(ROLLER_SPEED);
    }
    
    public void flushCube()
    {
    	if(Robot.arm.armAtPosition(ArmPositions.Switch) || Robot.arm.armAtPosition(ArmPositions.Intake) || Robot.arm.armAtPosition(ArmPositions.Exchange)) {
    		leftFrontIntakeMotor.set(ControlMode.PercentOutput, ROLLER_SPEED_FLUSH);
        	rightFrontIntakeMotor.set(ControlMode.PercentOutput, -ROLLER_SPEED_FLUSH);
    		leftBackIntakeMotor.set(ROLLER_SPEED_FLUSH);
    		rightBackIntakeMotor.set(ROLLER_SPEED_FLUSH);
    	}
    	else {
    		leftFrontIntakeMotor.set(ControlMode.PercentOutput, ROLLER_SPEED_FLUSH_FASTER);
        	rightFrontIntakeMotor.set(ControlMode.PercentOutput, -ROLLER_SPEED_FLUSH_FASTER);
    		leftBackIntakeMotor.set(ROLLER_SPEED_FLUSH_FASTER);
    		rightBackIntakeMotor.set(ROLLER_SPEED_FLUSH_FASTER);
    	}
    }
    
    public void stopIntake()
    {
    	leftFrontIntakeMotor.stopMotor();
    	rightFrontIntakeMotor.stopMotor();
    	leftBackIntakeMotor.stopMotor();
    	rightBackIntakeMotor.stopMotor();
    }
    
//    public boolean hasCube()
//    {
//    	return !cubeSwitch.get();
//    }
//    
//    /**
//     * Returns true when the intake is deployed to the lower position.
//     * @return
//     */
//    public boolean isLowered()
//    {
//    	return !lowerLimit.get(); 
//    }
//    /**
//     * Returns true when the intake is in the stowed or raised position.
//     * @return
//     */
//    public boolean isRaised()
//    {
//    	return !upperLimit.get();
//    }
    
//    public boolean isOpened()
//    {
//    	return !openLimit.get();
//    }
//    
//    public boolean isClosed()
//    {
//    	return !closeLimit.get();
//    }
    
//    public void closeIntake()
//    {
//    	gripMotor.set(CLOSE_SPEED);
//    }
//    
//    public void openIntake()
//    {
//    	gripMotor.set(OPEN_SPEED);
//    }
//    
//    public void stopIntakeGrip()
//    {
//    	gripMotor.set(0.0);
//    }
//    
//    public boolean intakeOpen()
//    {
//    	return openLimit.get();
//    }
//    
//    public boolean intakeClose()
//    {
//    	return closeLimit.get();
//
//    }
}